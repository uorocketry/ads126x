{"$message_type":"diagnostic","message":"non-local `impl` definition, `impl` blocks should be written at the same level as their item","code":{"code":"non_local_definitions","explanation":null},"level":"warning","spans":[{"file_name":"src/register/enums.rs","byte_start":2980,"byte_end":2994,"line_start":124,"line_end":124,"column_start":10,"column_end":24,"is_primary":false,"text":[{"text":"pub enum NegativeInpMux {","highlight_start":10,"highlight_end":24}],"label":"`NegativeInpMux` is not local","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/register/enums.rs","byte_start":2941,"byte_end":2967,"line_start":123,"line_end":123,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":"`Arbitrary` is not local","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/register/enums.rs","byte_start":2941,"byte_end":2967,"line_start":123,"line_end":123,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(proptest_derive::Arbitrary)]","def_site_span":{"file_name":"/home/ns/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proptest-derive-0.3.0/src/lib.rs","byte_start":1849,"byte_end":1924,"line_start":53,"line_end":53,"column_start":1,"column_end":76,"is_primary":false,"text":[{"text":"pub fn derive_proptest_arbitrary(input: pm::TokenStream) -> pm::TokenStream {","highlight_start":1,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/register/enums.rs","byte_start":2941,"byte_end":2967,"line_start":123,"line_end":123,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":"move the `impl` block outside of this constant `_IMPL_ARBITRARY_FOR_NegativeInpMux`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/register/enums.rs","byte_start":2941,"byte_end":2967,"line_start":123,"line_end":123,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(proptest_derive::Arbitrary)]","def_site_span":{"file_name":"/home/ns/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proptest-derive-0.3.0/src/lib.rs","byte_start":1849,"byte_end":1924,"line_start":53,"line_end":53,"column_start":1,"column_end":76,"is_primary":false,"text":[{"text":"pub fn derive_proptest_arbitrary(input: pm::TokenStream) -> pm::TokenStream {","highlight_start":1,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/register/enums.rs","byte_start":2941,"byte_end":2941,"line_start":123,"line_end":123,"column_start":42,"column_end":42,"is_primary":true,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/register/enums.rs","byte_start":2941,"byte_end":2967,"line_start":123,"line_end":123,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(proptest_derive::Arbitrary)]","def_site_span":{"file_name":"/home/ns/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proptest-derive-0.3.0/src/lib.rs","byte_start":1849,"byte_end":1924,"line_start":53,"line_end":53,"column_start":1,"column_end":76,"is_primary":false,"text":[{"text":"pub fn derive_proptest_arbitrary(input: pm::TokenStream) -> pm::TokenStream {","highlight_start":1,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the derive macro `proptest_derive::Arbitrary` defines the non-local `impl`, and may need to be changed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the derive macro `proptest_derive::Arbitrary` may come from an old version of the `proptest_derive` crate, try updating your dependency with `cargo update -p proptest_derive`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"items in an anonymous const item (`const _: () = { ... }`) are treated as in the same scope as the anonymous const's declaration for the purpose of this lint","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(non_local_definitions)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: non-local `impl` definition, `impl` blocks should be written at the same level as their item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/register/enums.rs:123:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Arbitrary` is not local\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove the `impl` block outside of this constant `_IMPL_ARBITRARY_FOR_NegativeInpMux`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum NegativeInpMux {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`NegativeInpMux` is not local\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the derive macro `proptest_derive::Arbitrary` defines the non-local `impl`, and may need to be changed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the derive macro `proptest_derive::Arbitrary` may come from an old version of the `proptest_derive` crate, try updating your dependency with `cargo update -p proptest_derive`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: items in an anonymous const item (`const _: () = { ... }`) are treated as in the same scope as the anonymous const's declaration for the purpose of this lint\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_local_definitions)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `proptest_derive::Arbitrary` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"non-local `impl` definition, `impl` blocks should be written at the same level as their item","code":{"code":"non_local_definitions","explanation":null},"level":"warning","spans":[{"file_name":"src/register/enums.rs","byte_start":3534,"byte_end":3548,"line_start":146,"line_end":146,"column_start":10,"column_end":24,"is_primary":false,"text":[{"text":"pub enum PositiveInpMux {","highlight_start":10,"highlight_end":24}],"label":"`PositiveInpMux` is not local","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/register/enums.rs","byte_start":3495,"byte_end":3521,"line_start":145,"line_end":145,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":"`Arbitrary` is not local","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/register/enums.rs","byte_start":3495,"byte_end":3521,"line_start":145,"line_end":145,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(proptest_derive::Arbitrary)]","def_site_span":{"file_name":"/home/ns/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proptest-derive-0.3.0/src/lib.rs","byte_start":1849,"byte_end":1924,"line_start":53,"line_end":53,"column_start":1,"column_end":76,"is_primary":false,"text":[{"text":"pub fn derive_proptest_arbitrary(input: pm::TokenStream) -> pm::TokenStream {","highlight_start":1,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/register/enums.rs","byte_start":3495,"byte_end":3521,"line_start":145,"line_end":145,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":"move the `impl` block outside of this constant `_IMPL_ARBITRARY_FOR_PositiveInpMux`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/register/enums.rs","byte_start":3495,"byte_end":3521,"line_start":145,"line_end":145,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(proptest_derive::Arbitrary)]","def_site_span":{"file_name":"/home/ns/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proptest-derive-0.3.0/src/lib.rs","byte_start":1849,"byte_end":1924,"line_start":53,"line_end":53,"column_start":1,"column_end":76,"is_primary":false,"text":[{"text":"pub fn derive_proptest_arbitrary(input: pm::TokenStream) -> pm::TokenStream {","highlight_start":1,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/register/enums.rs","byte_start":3495,"byte_end":3495,"line_start":145,"line_end":145,"column_start":42,"column_end":42,"is_primary":true,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/register/enums.rs","byte_start":3495,"byte_end":3521,"line_start":145,"line_end":145,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]","highlight_start":42,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(proptest_derive::Arbitrary)]","def_site_span":{"file_name":"/home/ns/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proptest-derive-0.3.0/src/lib.rs","byte_start":1849,"byte_end":1924,"line_start":53,"line_end":53,"column_start":1,"column_end":76,"is_primary":false,"text":[{"text":"pub fn derive_proptest_arbitrary(input: pm::TokenStream) -> pm::TokenStream {","highlight_start":1,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the derive macro `proptest_derive::Arbitrary` defines the non-local `impl`, and may need to be changed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the derive macro `proptest_derive::Arbitrary` may come from an old version of the `proptest_derive` crate, try updating your dependency with `cargo update -p proptest_derive`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"items in an anonymous const item (`const _: () = { ... }`) are treated as in the same scope as the anonymous const's declaration for the purpose of this lint","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: non-local `impl` definition, `impl` blocks should be written at the same level as their item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/register/enums.rs:145:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg_attr(feature = \"arbitrary\", derive(proptest_derive::Arbitrary))]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Arbitrary` is not local\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove the `impl` block outside of this constant `_IMPL_ARBITRARY_FOR_PositiveInpMux`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum PositiveInpMux {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`PositiveInpMux` is not local\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the derive macro `proptest_derive::Arbitrary` defines the non-local `impl`, and may need to be changed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the derive macro `proptest_derive::Arbitrary` may come from an old version of the `proptest_derive` crate, try updating your dependency with `cargo update -p proptest_derive`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: items in an anonymous const item (`const _: () = { ... }`) are treated as in the same scope as the anonymous const's declaration for the purpose of this lint\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `proptest_derive::Arbitrary` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
